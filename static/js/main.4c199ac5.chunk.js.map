{"version":3,"sources":["logo.svg","components/answer.jsx","component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Answer","props","Button","fluid","onClick","name","style","this","Component","MyComponent","state","value","list","interest","interests","horoscope","hasAcceptedIntro","hasSelectedSign","hasSelectedInterest","isHoroscopeLoading","horoscopeError","handleIntroChange","bind","handleChange","handleInterestChange","makeRequest","setState","updatedValue","updatedInterest","axios","get","URL","headers","then","response","status","console","log","data","text","madeWithLove","color","href","target","intro","fontSize","backgroundColor","width","height","zodiacSignsView","Grid","alignItems","columns","content","map","zodiac_sign","key","padding","interestsView","Layout","key_interest","window","location","reload","React","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","Provider","theme","teamsTheme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4c199ac5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Button } from '@fluentui/react-northstar';\n\nexport class Answer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tfluid\n\t\t\t\tonClick={() => this.props.onClick(this.props.name)}\n\t\t\t\tstyle={this.props.style}\n\t\t\t>\n\t\t\t\t<h1>{this.props.name}</h1>\n\t\t\t</Button>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport axios from 'axios';\nimport { Answer } from './components/answer';\nimport { Button, Grid, Layout } from '@fluentui/react-northstar';\n\nconst URL = 'https://b680549cb041.ngrok.io';\n\nexport class MyComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: 'Virgo',\n\t\t\tlist: [\n\t\t\t\t['Aries', '#FF5353'],\n\t\t\t\t['Taurus', '#80C181'],\n\t\t\t\t['Gemini', '#FFE153'],\n\t\t\t\t['Cancer', '#C8C8C8'],\n\t\t\t\t['Leo', '#FFA35A'],\n\t\t\t\t['Virgo', '#AF8366'],\n\t\t\t\t['Libra', '#FDBDBD'],\n\t\t\t\t['Scorpio', '#252525'],\n\t\t\t\t['Sagittarius', '#C0ADEF'],\n\t\t\t\t['Capricorn', '#666B67'],\n\t\t\t\t['Aquarius', '#80BFEA'],\n\t\t\t\t['Pisces', '#A1E2C4'],\n\t\t\t],\n\t\t\tinterest: 'love',\n\t\t\tinterests: [\n\t\t\t\t['Love', '#CA1551'],\n\t\t\t\t['Friends', '#03CEA4'],\n\t\t\t\t['Work life', '#345995'],\n\t\t\t\t['Future', '#FB4D3D'],\n\t\t\t\t['Fears', '#78C0E0'],\n\t\t\t\t['Money', '#F46036'],\n\t\t\t],\n\t\t\thoroscope: '',\n\t\t\thasAcceptedIntro: false,\n\t\t\thasSelectedSign: false,\n\t\t\thasSelectedInterest: false,\n\t\t\tisHoroscopeLoading: true,\n\t\t\thoroscopeError: false,\n\t\t};\n\n\t\tthis.handleIntroChange = this.handleIntroChange.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleInterestChange = this.handleInterestChange.bind(this);\n\t\tthis.makeRequest = this.makeRequest.bind(this);\n\t}\n\n\thandleIntroChange() {\n\t\tthis.setState({ hasAcceptedIntro: true });\n\t}\n\n\thandleChange(updatedValue) {\n\t\tthis.setState({ value: updatedValue, hasSelectedSign: true });\n\t}\n\n\thandleInterestChange(updatedInterest) {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tinterest: updatedInterest,\n\t\t\t\thasSelectedInterest: true,\n\t\t\t},\n\t\t\tthis.makeRequest\n\t\t);\n\t}\n\n\tmakeRequest() {\n\t\taxios\n\t\t\t.get(URL + '/' + this.state.value + '/' + this.state.interest, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t'Access-Control-Allow-Methods': 'DELETE, POST, GET, OPTIONS',\n\t\t\t\t\t'Access-Control-Allow-Headers':\n\t\t\t\t\t\t'Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With',\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.status == 200) {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\thoroscope: response.data.text,\n\t\t\t\t\t\tisHoroscopeLoading: false,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\thoroscope: 'An error ocurred on the server. Try again.',\n\t\t\t\t\t\tisHoroscopeLoading: false,\n\t\t\t\t\t\thoroscopeError: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\trender() {\n\t\tlet madeWithLove = (\n\t\t\t<p>\n\t\t\t\tMade with <span style={{ color: '#e25555' }}>&#9829;</span> by{' '}\n\t\t\t\t<a href='https://github.com/ericklarac' target='blank'>\n\t\t\t\t\t@ericklarac\n\t\t\t\t</a>{' '}\n\t\t\t\tand{' '}\n\t\t\t\t<a href='https://github.com/carloshinojosac' target='blank'>\n\t\t\t\t\t@carloshinojosac\n\t\t\t\t</a>\n\t\t\t</p>\n\t\t);\n\n\t\tlet intro = (\n\t\t\t<div>\n\t\t\t\t<h1>Astrology AI</h1>\n\n\t\t\t\t<p style={{ fontSize: '2em' }}>\n\t\t\t\t\tWe used OpenAI's GPT-2 (a text-generating Transformer Neural Network)\n\t\t\t\t\tto generate horoscope text.\n\t\t\t\t</p>\n\n\t\t\t\t<p style={{ fontSize: '2em' }}>\n\t\t\t\t\tGet your horoscope in three simple steps:\n\t\t\t\t</p>\n\n\t\t\t\t<div>\n\t\t\t\t\t<p style={{ fontSize: '1.7em' }}>1. Pick your zodiac sign</p>\n\t\t\t\t\t<p style={{ fontSize: '1.7em' }}>2. Pick an interest</p>\n\t\t\t\t\t<p style={{ fontSize: '1.7em' }}>\n\t\t\t\t\t\t3. Be patient. Text is generated in real-time, so it might take a\n\t\t\t\t\t\tbit.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<p style={{ fontSize: '2em' }}>\n\t\t\t\t\tIt's pretty easy to train your own text-generating model using{' '}\n\t\t\t\t\t<a\n\t\t\t\t\t\ttarget='blank'\n\t\t\t\t\t\thref='https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce'\n\t\t\t\t\t>\n\t\t\t\t\t\tthis colab notebook.\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => this.handleIntroChange()}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tfontSize: '2em',\n\t\t\t\t\t\tbackgroundColor: '#1be504',\n\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\twidth: '50em',\n\t\t\t\t\t\theight: '3em',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tStart!\n\t\t\t\t</Button>\n\n\t\t\t\t{madeWithLove}\n\t\t\t</div>\n\t\t);\n\n\t\tlet zodiacSignsView = (\n\t\t\t<div>\n\t\t\t\t<h1>Pick your zodiac sign</h1>\n\n\t\t\t\t<Grid\n\t\t\t\t\tstyle={{ alignItems: 'center' }}\n\t\t\t\t\tcolumns={2}\n\t\t\t\t\tcontent={this.state.list.map((zodiac_sign) => (\n\t\t\t\t\t\t<Answer\n\t\t\t\t\t\t\tkey={zodiac_sign[0]}\n\t\t\t\t\t\t\tname={zodiac_sign[0]}\n\t\t\t\t\t\t\tonClick={this.handleChange}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tpadding: '5em',\n\t\t\t\t\t\t\t\tbackgroundColor: zodiac_sign[1],\n\t\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\n\t\tlet interestsView = (\n\t\t\t<Layout>\n\t\t\t\t<h1>Pick an interest</h1>\n\t\t\t\t<Grid\n\t\t\t\t\tcolumns={1}\n\t\t\t\t\tcontent={this.state.interests.map((key_interest) => (\n\t\t\t\t\t\t<Answer\n\t\t\t\t\t\t\tkey={key_interest[0]}\n\t\t\t\t\t\t\tname={key_interest[0]}\n\t\t\t\t\t\t\tonClick={this.handleInterestChange}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tpadding: '5em',\n\t\t\t\t\t\t\t\tbackgroundColor: key_interest[1],\n\t\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t/>\n\t\t\t</Layout>\n\t\t);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{!this.state.hasAcceptedIntro ? (\n\t\t\t\t\tintro\n\t\t\t\t) : !this.state.hasSelectedSign ? (\n\t\t\t\t\tzodiacSignsView\n\t\t\t\t) : !this.state.hasSelectedInterest ? (\n\t\t\t\t\tinterestsView\n\t\t\t\t) : this.state.isHoroscopeLoading ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>Please wait, the AI is generating your horoscope...</h1>\n\t\t\t\t\t</div>\n\t\t\t\t) : this.state.horoscopeError ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>An error occurred</h1>\n\t\t\t\t\t\t<p>{this.state.horoscope}</p>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p style={{ fontSize: '3em' }}>Your horoscope is:</p>\n\t\t\t\t\t\t<p style={{ fontSize: '1.4em', padding: '2em' }}>\n\t\t\t\t\t\t\t{this.state.horoscope}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => window.location.reload(false)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfontSize: '2em',\n\t\t\t\t\t\t\t\tbackgroundColor: '#048ee5',\n\t\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t\t\twidth: '50em',\n\t\t\t\t\t\t\t\theight: '3em',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTry again!\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t{madeWithLove}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { MyComponent } from './component.jsx';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<MyComponent />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider, teamsTheme } from '@fluentui/react-northstar';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider theme={teamsTheme}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}